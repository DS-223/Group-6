{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Supermarket Hot Deals \u2013 Group Project","text":""},{"location":"#employee-management-system","title":"Employee Management System","text":"<p>A Dockerized microservice project for managing employee records using FastAPI, Streamlit, PostgreSQL, and pgAdmin. This project also includes ETL processing and documentation hosted using MkDocs.</p>"},{"location":"#problem-definition","title":"Problem Definition","text":""},{"location":"#the-problem-area","title":"The Problem Area","text":"<p>A/B Testing \u2013 Optimizing the online display of promotional content to improve customer engagement and sales in the e-commerce grocery and retail sector.  </p>"},{"location":"#defining-the-specific-problem","title":"Defining the Specific Problem","text":"<p>Supermarkets lack data-driven guidelines on the optimal sequence to display \"Hot Sales\" items on their website homepage. The absence of an optimized ordering may result in: - Lower click-through rates (CTR) - Missed sales opportunities - Suboptimal customer engagement - </p>"},{"location":"#expected-outcomes","title":"Expected Outcomes","text":"<ul> <li>Higher CTR on \"Hot Sales\" items.  </li> <li>Increased revenue from optimized product placement.  </li> </ul>"},{"location":"#quick-links","title":"\ud83d\ude80 Quick Links","text":"<ul> <li>\ud83d\udd17 Streamlit UI: http://localhost:8501</li> <li>\ud83d\udd17 FastAPI Swagger Docs: http://localhost:8008/docs</li> <li>\ud83d\udd17 pgAdmin Interface: http://localhost:5050</li> <li>\ud83d\udd17 Documentation: https://ds-223.github.io/Group-6/</li> </ul>"},{"location":"#branches","title":"\ud83d\udcc2 Branches","text":"<ul> <li>main: Complete integrated system</li> <li>db-9: Database &amp; ETL process</li> <li>backend: FastAPI backend service</li> <li>frontend: Streamlit frontend interface</li> <li>ds: Jupyter notebook environment</li> <li>gh-pages: GitHub Pages documentation deployment</li> </ul>"},{"location":"#installation-setup","title":"\ud83e\uddf0 Installation &amp; Setup","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following installed:</p> <ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"#clone-and-run","title":"Clone and Run","text":"<pre><code>git clone https://github.com/hovhannisyan91/pythonmicroservicedesign.git](https://github.com/DS-223/Group-6.git\n\ncd Supermarket_Hot_Deals\n\ndocker-compose up --build\n</code></pre>"},{"location":"#employee-management-system-documentation","title":"Employee Management System Documentation","text":""},{"location":"#access-the-application","title":"\ud83c\udf10 Access the Application","text":"Service URL Description Streamlit UI http://localhost:8501 Interactive employee management interface FastAPI (Swagger) http://localhost:8008/docs API documentation and testing interface pgAdmin http://localhost:5050 Database management tool for PostgreSQL <p>pgAdmin Login:</p>"},{"location":"#email-adminadmincom","title":"Email: admin@admin.com","text":"<p>Password: admin</p> <p>\ud83d\udca1 You may need to add a server manually the first time in pgAdmin. Use PostgreSQL default port and credentials from your <code>.env</code>.</p>"},{"location":"#project-structure","title":"\ud83c\udfd7\ufe0f Project Structure","text":"<p>\u251c\u2500\u2500 .github/ \u2502   \u2514\u2500\u2500 workflows/ \u251c\u2500\u2500 Supermarket_Hot_Deals/ \u2502   \u251c\u2500\u2500 Database/ \u2502   \u251c\u2500\u2500 backend/ \u2502   \u251c\u2500\u2500 ds/ \u2502   \u251c\u2500\u2500 frontend/ \u2502   \u251c\u2500\u2500 pgadmin_data/ \u2502   \u2502   \u2514\u2500\u2500 sessions/ \u2502   \u251c\u2500\u2500 .env \u2502   \u251c\u2500\u2500 init.py \u2502   \u2514\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 docs/ \u251c\u2500\u2500 feedback/ \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Problem Definition.pdf \u251c\u2500\u2500 Readme.md \u2514\u2500\u2500 mkdocs.yml</p> <p>## \ud83e\uddea API Features (FastAPI)</p>"},{"location":"#endpoints","title":"Endpoints","text":"Endpoint Method Description <code>/employees/</code> POST Add a new employee <code>/employees/{id}</code> GET Get employee by ID <code>/employees/{id}</code> PUT Update salary <code>/employees/{id}</code> DELETE Remove employee <p>\ud83d\udcce Interact with these endpoints at: http://localhost:8008/docs</p> <p>Here is the screenshot of the Swagger: </p> <p> </p>"},{"location":"#streamlit-web-application","title":"\ud83d\udcca Streamlit Web Application","text":"<p>This service (<code>app/</code>) is responsible for the frontend interface:</p> <p></p> <p>\ud83c\udf10 Access it at: http://localhost:8501</p>"},{"location":"#database-postgresql-pgadmin","title":"\ud83d\uddc3\ufe0f Database (PostgreSQL + pgAdmin)","text":"<p>The database is connected to the backend API. You can visualize or modify data directly using pgAdmin.</p> <p>\ud83d\udca1 Instructions: - Create a server using the credentials in your <code>.env</code> file. - Use <code>pgAdmin</code> to inspect tables and run SQL queries.</p>"},{"location":"#this-is-the-erd","title":"This is the ERD:","text":""},{"location":"#mkdocs-documentation","title":"\ud83d\udcd8 MkDocs: Documentation","text":"<p>MkDocs generates beautiful HTML documentation from Markdown files.</p>"},{"location":"#prerequisites_1","title":"\u2705 Prerequisites","text":"<p>Install the required dependencies:</p> <pre><code>pip install mkdocs-material\npip install 'mkdocstrings[python]'\n</code></pre>"},{"location":"#how-to-use-mkdocs","title":"\ud83d\ude80 How to Use MkDocs","text":"<p>To see the documentation, type </p> <p>```bash    mkdocs serve</p> <p>```    and click on the browser connection to open it in your browser.</p> <p>Next Steps: - Link to methodology for technical details. - Refer to database schema for data collection structure.  </p>"},{"location":"api/","title":"\ud83e\uddea API - Backend","text":""},{"location":"api/#Supermarket_Hot_Deals.backend.main.clicks_per_ad","title":"<code>clicks_per_ad(project_id, db=Depends(get_db))</code>","text":"<p>Retrieve ad performance data (clicks) formatted for charting purposes.</p> <p>This endpoint returns a dictionary with two parallel lists: 'labels' for ad names and 'values' for the corresponding number of clicks. Useful for generating bar charts or other visualizations.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>int</code> <p>The unique ID of the project to retrieve ad performance for.</p> required <code>db</code> <code>Session</code> <p>SQLAlchemy database session. Automatically provided by FastAPI.</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary with: - 'labels' (List[str]): Names of the ads (bandits) - 'values' (List[int]): Number of clicks per ad</p> Source code in <code>Supermarket_Hot_Deals/backend/main.py</code> <pre><code>@app.get(\"/analytics/clicks-per-ad\")\ndef clicks_per_ad(project_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Retrieve ad performance data (clicks) formatted for charting purposes.\n\n    This endpoint returns a dictionary with two parallel lists: 'labels' for ad names and\n    'values' for the corresponding number of clicks. Useful for generating bar charts or\n    other visualizations.\n\n    Args:\n        project_id (int): The unique ID of the project to retrieve ad performance for.\n        db (Session, optional): SQLAlchemy database session. Automatically provided by FastAPI.\n\n    Returns:\n        dict: A dictionary with:\n            - 'labels' (List[str]): Names of the ads (bandits)\n            - 'values' (List[int]): Number of clicks per ad\n    \"\"\"\n    ads = db.query(Bandit).filter(Bandit.project_id == project_id).all()\n    return {\n        \"labels\": [ad.bandit_name for ad in ads],\n        \"values\": [ad.number_of_success for ad in ads]\n    }\n</code></pre>"},{"location":"api/#Supermarket_Hot_Deals.backend.main.create_ad","title":"<code>create_ad(bandit, db=Depends(get_db))</code>","text":"<p>Create a new ad (bandit) for a given project.</p> <p>This endpoint initializes a new bandit under a specific project with default parameters for Thompson Sampling (alpha=1.0, beta=1.0, n=0, etc.).</p> <p>Parameters:</p> Name Type Description Default <code>bandit</code> <code>BanditInput</code> <p>Input data containing the project ID and the name of the bandit.</p> required <code>db</code> <code>Session</code> <p>SQLAlchemy database session. Automatically provided by FastAPI.</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>BanditOutput</code> <p>The newly created bandit's data including its initialized values.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the specified project does not exist (404).</p> Source code in <code>Supermarket_Hot_Deals/backend/main.py</code> <pre><code>@app.post(\"/ads\", response_model=BanditOutput)\ndef create_ad(bandit: BanditInput, db: Session = Depends(get_db)):\n    \"\"\"\n    Create a new ad (bandit) for a given project.\n\n    This endpoint initializes a new bandit under a specific project with\n    default parameters for Thompson Sampling (alpha=1.0, beta=1.0, n=0, etc.).\n\n    Args:\n        bandit (BanditInput): Input data containing the project ID and the name of the bandit.\n        db (Session, optional): SQLAlchemy database session. Automatically provided by FastAPI.\n\n    Returns:\n        BanditOutput: The newly created bandit's data including its initialized values.\n\n    Raises:\n        HTTPException: If the specified project does not exist (404).\n    \"\"\"\n    project = db.query(Project).filter(Project.project_id == bandit.project_id).first()\n    if not project:\n        raise HTTPException(status_code=404, detail=\"Project not found\")\n\n    new_bandit = Bandit(\n        project_id=bandit.project_id,\n        bandit_name=bandit.bandit_name,\n        alpha=1.0,\n        beta=1.0,\n        n=0,\n        number_of_success=0,\n        number_of_failures=0\n    )\n    db.add(new_bandit)\n\n    project.number_of_bandits += 1\n\n    db.commit()\n    db.refresh(new_bandit)\n    return new_bandit\n</code></pre>"},{"location":"api/#Supermarket_Hot_Deals.backend.main.create_project","title":"<code>create_project(project, db=Depends(get_db))</code>","text":"<p>Create a new project with a unique project ID.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>ProjectInput</code> <p>Contains the project name, description, and number of bandits.</p> required <p>Returns:</p> Name Type Description <code>ProjectOutput</code> <p>The newly created project including the generated project ID.</p> Source code in <code>Supermarket_Hot_Deals/backend/main.py</code> <pre><code>@app.post(\"/projects\")\ndef create_project(project: ProjectInput, db: Session = Depends(get_db)):\n    \"\"\"\n    Create a new project with a unique project ID.\n\n    Args:\n        project (ProjectInput): Contains the project name, description, and number of bandits.\n\n    Returns:\n        ProjectOutput: The newly created project including the generated project ID.\n    \"\"\"\n    new_project = Project(\n        project_id = project.project_id,\n        project_name=project.project_name,\n        project_description=project.project_description,\n        number_of_bandits=project.number_of_bandits\n    )\n    db.add(new_project)\n    db.commit()\n    db.refresh(new_project)\n    return new_project\n</code></pre>"},{"location":"api/#Supermarket_Hot_Deals.backend.main.get_ads","title":"<code>get_ads(project_id, db=Depends(get_db))</code>","text":"<p>Retrieve all ads (bandits) for a given project.</p> <p>This endpoint returns a list of all bandits that belong to the specified project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>int</code> <p>The unique ID of the project whose ads are being requested.</p> required <code>db</code> <code>Session</code> <p>SQLAlchemy database session. Automatically provided by FastAPI.</p> <code>Depends(get_db)</code> <p>Returns:</p> Type Description <p>List[BanditOutput]: A list of bandits associated with the specified project.</p> Source code in <code>Supermarket_Hot_Deals/backend/main.py</code> <pre><code>@app.get(\"/ads\", response_model=List[BanditOutput])\ndef get_ads(project_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Retrieve all ads (bandits) for a given project.\n\n    This endpoint returns a list of all bandits that belong to the specified project.\n\n    Args:\n        project_id (int): The unique ID of the project whose ads are being requested.\n        db (Session, optional): SQLAlchemy database session. Automatically provided by FastAPI.\n\n    Returns:\n        List[BanditOutput]: A list of bandits associated with the specified project.\n    \"\"\"\n    ads = db.query(Bandit).filter(Bandit.project_id == project_id).all()\n    return ads\n</code></pre>"},{"location":"api/#Supermarket_Hot_Deals.backend.main.get_all_projects","title":"<code>get_all_projects(db=Depends(get_db))</code>","text":"<p>Retrieve all projects.</p> <p>Returns:</p> Type Description <p>List[ProjectOutput]: A list of all projects.</p> Source code in <code>Supermarket_Hot_Deals/backend/main.py</code> <pre><code>@app.get(\"/projects\", response_model=List[ProjectOutput])\ndef get_all_projects(db: Session = Depends(get_db)):\n    \"\"\"\n    Retrieve all projects.\n\n    Returns:\n        List[ProjectOutput]: A list of all projects.\n    \"\"\"\n    projects = db.query(Project).all()\n    if not projects:\n        raise HTTPException(status_code=404, detail=\"No projects found\")    \n\n    return projects\n</code></pre>"},{"location":"api/#Supermarket_Hot_Deals.backend.main.get_project","title":"<code>get_project(project_id, db=Depends(get_db))</code>","text":"<p>Retrieve a single project by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>int</code> <p>The unique ID of the project.</p> required <p>Returns:</p> Name Type Description <code>ProjectOutput</code> <p>The project details.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the project is not found.</p> Source code in <code>Supermarket_Hot_Deals/backend/main.py</code> <pre><code>@app.get(\"/project/{project_id}\", response_model=ProjectOutput)\n\ndef get_project(project_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Retrieve a single project by its ID.\n\n    Args:\n        project_id (int): The unique ID of the project.\n\n    Returns:\n        ProjectOutput: The project details.\n\n    Raises:\n        HTTPException: If the project is not found.\n    \"\"\"\n    project = db.query(Project).filter(Project.project_id == project_id).first()\n    if not project:\n        raise HTTPException(status_code=404, detail=\"Project not found\")\n    print('project', project)\n    return project\n</code></pre>"},{"location":"api/#Supermarket_Hot_Deals.backend.main.get_project_bandits","title":"<code>get_project_bandits(project_id, db=Depends(get_db))</code>","text":"<p>Retrieve all bandits (ads) associated with a specific project.</p> <p>This endpoint returns the project ID along with a list of all bandits under that project, including each bandit's ID and name. Useful for displaying available ad options in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>int</code> <p>The unique ID of the project to retrieve bandits from.</p> required <code>db</code> <code>Session</code> <p>SQLAlchemy database session. Automatically provided by FastAPI.</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing: - 'project_id' (int): The ID of the project - 'bandits' (List[dict]): A list of dictionaries, each with:     - 'bandit_id' (int): The ID of the bandit     - 'bandit_name' (str): The name of the bandit</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the project with the given ID is not found (404).</p> Source code in <code>Supermarket_Hot_Deals/backend/main.py</code> <pre><code>@app.get(\"/analytics/project-bandits\")\ndef get_project_bandits(project_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Retrieve all bandits (ads) associated with a specific project.\n\n    This endpoint returns the project ID along with a list of all bandits under that project,\n    including each bandit's ID and name. Useful for displaying available ad options in a project.\n\n    Args:\n        project_id (int): The unique ID of the project to retrieve bandits from.\n        db (Session, optional): SQLAlchemy database session. Automatically provided by FastAPI.\n\n    Returns:\n        dict: A dictionary containing:\n            - 'project_id' (int): The ID of the project\n            - 'bandits' (List[dict]): A list of dictionaries, each with:\n                - 'bandit_id' (int): The ID of the bandit\n                - 'bandit_name' (str): The name of the bandit\n\n    Raises:\n        HTTPException: If the project with the given ID is not found (404).\n    \"\"\"\n\n    project = db.query(Project).filter(Project.project_id == project_id).first()\n    if not project:\n        raise HTTPException(status_code=404, detail=\"Project not found\")\n\n    bandits = db.query(Bandit).filter(Bandit.project_id == project_id).all()\n\n    return {\n        \"project_id\": project_id,\n        \"bandits\": [\n            {\"bandit_id\": b.bandit_id, \"bandit_name\": b.bandit_name} for b in bandits\n        ]\n    }\n</code></pre>"},{"location":"api/#Supermarket_Hot_Deals.backend.main.get_top_3_sampled_ads","title":"<code>get_top_3_sampled_ads(project_id, db=Depends(get_db))</code>","text":"<p>Retrieve the top 3 sampled ads (bandits) for a given project using Thompson Sampling.</p> <p>This endpoint performs sampling from the Beta distribution for each bandit and returns the top 3 ads with the highest sampled values. This is used for selecting which ads to display based on learned performance.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>int</code> <p>The unique ID of the project whose bandits are being sampled.</p> required <code>db</code> <code>Session</code> <p>SQLAlchemy database session. Automatically provided by FastAPI.</p> <code>Depends(get_db)</code> <p>Returns:</p> Type Description <p>List[BanditOutput]: A list of the top 3 bandits sampled by Thompson Sampling.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If no bandits are found for the given project (404).</p> Source code in <code>Supermarket_Hot_Deals/backend/main.py</code> <pre><code>@app.get(\"/ads/sample\", response_model=List[BanditOutput])\ndef get_top_3_sampled_ads(project_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Retrieve the top 3 sampled ads (bandits) for a given project using Thompson Sampling.\n\n    This endpoint performs sampling from the Beta distribution for each bandit and returns\n    the top 3 ads with the highest sampled values. This is used for selecting which ads to display\n    based on learned performance.\n\n    Args:\n        project_id (int): The unique ID of the project whose bandits are being sampled.\n        db (Session, optional): SQLAlchemy database session. Automatically provided by FastAPI.\n\n    Returns:\n        List[BanditOutput]: A list of the top 3 bandits sampled by Thompson Sampling.\n\n    Raises:\n        HTTPException: If no bandits are found for the given project (404).\n    \"\"\"\n    bandits = db.query(Bandit).filter(Bandit.project_id == project_id).all()\n\n    if not bandits:\n        raise HTTPException(status_code=404, detail=\"No ads found for this project.\")\n\n    # Sample from Beta distribution for each ad\n    sampled = sorted(\n        bandits,\n        key=lambda b: random.betavariate(b.alpha, b.beta),\n        reverse=True\n    )[:3]\n\n    return sampled\n</code></pre>"},{"location":"api/#Supermarket_Hot_Deals.backend.main.register_click","title":"<code>register_click(project_id, bandit_id, db=Depends(get_db))</code>","text":"<p>Register a click (success) for a specific ad (bandit) in a project.</p> <p>This endpoint increments the number of successes and the total impression count for a given bandit, simulating a user clicking on the ad.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>int</code> <p>The ID of the project the bandit belongs to.</p> required <code>bandit_id</code> <code>int</code> <p>The ID of the bandit (ad) to register the click for.</p> required <code>db</code> <code>Session</code> <p>SQLAlchemy database session. Automatically provided by FastAPI.</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>A success message confirming that the click has been registered.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the bandit with the specified ID and project ID is not found (404).</p> Source code in <code>Supermarket_Hot_Deals/backend/main.py</code> <pre><code>@app.post(\"/ads/{bandit_id}/click\")\ndef register_click(project_id: int, bandit_id: int, db: Session = Depends(get_db)):\n    \"\"\"\n    Register a click (success) for a specific ad (bandit) in a project.\n\n    This endpoint increments the number of successes and the total impression count\n    for a given bandit, simulating a user clicking on the ad.\n\n    Args:\n        project_id (int): The ID of the project the bandit belongs to.\n        bandit_id (int): The ID of the bandit (ad) to register the click for.\n        db (Session, optional): SQLAlchemy database session. Automatically provided by FastAPI.\n\n    Returns:\n        dict: A success message confirming that the click has been registered.\n\n    Raises:\n        HTTPException: If the bandit with the specified ID and project ID is not found (404).\n    \"\"\"\n    bandit = db.query(Bandit).filter_by(bandit_id=bandit_id, project_id=project_id).first()\n    if not bandit:\n        raise HTTPException(status_code=404, detail=\"Ad not found\")\n\n    bandit.number_of_success += 1\n    bandit.n += 1\n    db.commit()\n\n    return {\"message\": \"Click registered\"}\n</code></pre>"},{"location":"database/","title":"Database","text":""},{"location":"database/#Supermarket_Hot_Deals.Database.models.Bandit","title":"<code>Bandit</code>","text":"<p>               Bases: <code>Base</code></p> <p>Represents an individual bandit (variant/option) in a multi-armed bandit algorithm. Tracks statistics like alpha, beta, number of successes/failures for Thompson Sampling.</p> Source code in <code>Supermarket_Hot_Deals/Database/models.py</code> <pre><code>class Bandit(Base):\n    \"\"\"\n    Represents an individual bandit (variant/option) in a multi-armed bandit algorithm.\n    Tracks statistics like alpha, beta, number of successes/failures for Thompson Sampling.\n    \"\"\"\n    __tablename__ = 'bandits'\n\n    bandit_id = Column(Integer, primary_key=True)\n    project_id = Column(Integer, ForeignKey('projects.project_id'), nullable=False)\n    bandit_name = Column(String, nullable=False)\n\n    alpha = Column(Float, nullable=False)\n    beta = Column(Float, nullable=False)\n    n = Column(Integer, nullable=False)\n    number_of_success = Column(Integer, nullable=False)\n    number_of_failures = Column(Integer, nullable=False)\n\n    # Relationships\n    project = relationship('Project', back_populates='bandits')\n    transactions = relationship('Transaction', back_populates='bandit')\n</code></pre>"},{"location":"database/#Supermarket_Hot_Deals.Database.models.Project","title":"<code>Project</code>","text":"<p>               Bases: <code>Base</code></p> <p>Represents a project that contains multiple bandits. Projects are used to group related bandits and experiments.</p> Source code in <code>Supermarket_Hot_Deals/Database/models.py</code> <pre><code>class Project(Base):\n    \"\"\"\n    Represents a project that contains multiple bandits.\n    Projects are used to group related bandits and experiments.\n    \"\"\"\n    __tablename__ = 'projects'\n\n    project_id = Column(Integer, primary_key=True)\n    project_name = Column(String, nullable=False)\n    project_description = Column(Text)\n    number_of_bandits = Column(Integer, nullable=False)\n\n    # Relationships\n    bandits = relationship('Bandit', back_populates='project')\n    transactions = relationship('Transaction', back_populates='project')\n</code></pre>"},{"location":"database/#Supermarket_Hot_Deals.Database.models.Transaction","title":"<code>Transaction</code>","text":"<p>               Bases: <code>Base</code></p> <p>Represents a single interaction or event where a user was shown a bandit (variant). Records whether the user clicked (success) or not.</p> Source code in <code>Supermarket_Hot_Deals/Database/models.py</code> <pre><code>class Transaction(Base):\n    \"\"\"\n    Represents a single interaction or event where a user was shown a bandit (variant).\n    Records whether the user clicked (success) or not.\n    \"\"\"\n    __tablename__ = 'transactions'\n\n    transaction_id = Column(Integer, primary_key=True)\n    customer_id = Column(Integer, ForeignKey('users.customer_id'), nullable=False)\n    project_id = Column(Integer, ForeignKey('projects.project_id'), nullable=False)\n    bandit_id = Column(Integer, ForeignKey('bandits.bandit_id'), nullable=False)\n\n    timestamp = Column(DateTime, nullable=False)\n    clicked = Column(Boolean, default=False)\n\n    # Relationships\n    customer = relationship('User', back_populates='transactions')\n    project = relationship('Project', back_populates='transactions')\n    bandit = relationship('Bandit', back_populates='transactions')\n</code></pre>"},{"location":"database/#Supermarket_Hot_Deals.Database.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>Base</code></p> <p>Represents a customer/user in the system. Each user can perform multiple transactions.</p> Source code in <code>Supermarket_Hot_Deals/Database/models.py</code> <pre><code>class User(Base):\n    \"\"\"\n    Represents a customer/user in the system.\n    Each user can perform multiple transactions.\n    \"\"\"\n    __tablename__ = 'users'\n\n    customer_id = Column(Integer, primary_key=True)\n    email = Column(String, nullable=False, unique=True)\n    name = Column(String, nullable=False)\n\n    # Relationships\n    transactions = relationship('Transaction', back_populates='customer')\n</code></pre>"},{"location":"frontend/","title":"Frontend","text":"<p>Supermarket Hot Sales - Streamlit Frontend</p> <p>This Streamlit app displays current supermarket deals. Users can: - Search for products - Sort by price - View paginated product listings with images - Add items to a shopping basket</p> <p>Built with \u2764\ufe0f using Streamlit.</p>"},{"location":"model/","title":"Model","text":""},{"location":"model/#ds","title":"ds","text":""}]}